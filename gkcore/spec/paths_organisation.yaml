organisation:
  get:
    tags: ["Organisation"]
    summary: Fetch an organisation's data
    operationId: getOrg
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"
                gkdata:
                  $ref: "./organisation/schemas_org.yaml#/orgDetails"
  post:
    tags: ["Organisation"]
    summary: Create a new organisation
    operationId: postOrg
    security:
      - UserAuth: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "./organisation/schemas_org.yaml#/orgDetails"
    responses:
      200:
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"
                token:
                  type: string
                  description: JWT token used to authenticate a user in an organisation
                orgcode:
                  type: integer
                  description: An integer denoting the id of the organisation

  put:
    tags: ["Organisation"]
    summary: Edit an organisation's data
    operationId: putOrg
    requestBody:
      content:
        application/json:
          schema:
            $ref: "./organisation/schemas_org.yaml#/orgDetails"
    responses:
      200:
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"

  delete:
    tags: ["Organisation"]
    summary: Delete an organisation
    operationId: deleteOrg
    responses:
      200:
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"

organisation_all:
  get:
    tags: ["Organisation"]
    summary: Fetch a list of organisations in the DB
    operationId: getOrgs
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"
                gkdata:
                  type: array
                  items:
                    type: object
                    properties:
                      orgname:
                        type: string
                      orgtype:
                        $ref: "./organisation/schemas_org.yaml#/orgType"

organisation_gstin:
  get:
    tags: ["Organisation"] # , "gstin"
    summary: Fetch an organisation's Gstin
    operationId: gstGstin
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"
                gkresult:
                  type: object
                  properties:
                    gstin:
                      type: string
                    stateCode:
                      $ref: "./global/schemas.yaml#/stateCode"

organisation_attachment:
  get:
    tags: ["Organisation"]
    summary: Fetch an organisation's logo
    operationId: getattachment
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"
                logo:
                  type: string
                  format: byte
              example:
                gkstatus: 0
                logo: ""

organisation_gst_accounts:
  get:
    tags: ["Organisation"] # , "GST", "Accounts", "Current Liabilities"
    summary: Get all accounts of group 'Current Liabilities' and subgroup 'Duties & Taxes' created for GST.
    operationId: getGSTGaccounts
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"
                accounts:
                  type: array
                  items:
                    type: string

organisation_gst_accounts_codes:
  get:
    tags: ["Organisation"] # "GST", "Account Codes", "Duties & Taxes", "Current Liabilities",    
    summary: Get groupcode of group 'Current Liabilities' and subgroup 'Duties & Taxes'
    operationId: getGSTGroupCode
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"
                subgroupcode:
                  type: integer
                groupcode:
                  type: integer

organisation_registration:
  get:
    tags: ["Organisation"]
    summary: Check if the user is free to create new users / organisations
    operationId: checkRegistrationStatus
    security: [{}]
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"

organisation_orgname:
  get:
    tags: ["Organisation"]
    summary: Check if an organisation's name is unique
    operationId: orgNameExists
    security: [{}]
    parameters:
      - in: path
        name: orgname
        schema:
          type: string
        required: true
        description: Organisation name to be checked if unique
    responses:
      "200":
        description: ok
        content:
          application/json:
            schema:
              type: object
              required: [gkstatus]
              properties:
                gkstatus:
                  $ref: "./global/schemas.yaml#/gkstatus"

# organisation_gkusers:
#   get:
#     tags: ["Organisation"]
#     summary: Fetch an organisation's data
#     operationId: getOrg
#     responses:
#       "200":
#         description: ok
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 gkstatus:
#                   $ref: "./global/schemas.yaml#/gkstatus"
#                 gkdata:
#                   $ref: "./organisation/schemas_org.yaml#/orgDetails"

components:
  securitySchemes:
    UserAuth:
      type: apiKey
      in: header
      name: gkusertoken
