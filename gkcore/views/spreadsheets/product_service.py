"""
Copyright (C) 2013, 2014, 2015, 2016 Digital Freedom Foundation
Copyright (C) 2017, 2018, 2019, 2020 Digital Freedom Foundation & Accion Labs Pvt. Ltd.
  This file is part of GNUKhata:A modular,robust and Free Accounting System.

  GNUKhata is Free Software; you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation; either version 3 of
  the License, or (at your option) any later version.

  GNUKhata is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public
  License along with GNUKhata (COPYING); if not, write to the
  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  Boston, MA  02110-1301  USA59 Temple Place, Suite 330,


Contributors:
"Survesh" <123survesh@gmail.com>
"Sai Karthik"<kskarthik@disroot.org>

"""

from gkcore import eng, enumdict
from gkcore.views.api_login import authCheck
from gkcore.models.gkdb import (
    organisation,
    unitofmeasurement,
    product,
    goprod,
    stock,
    categorysubcategories,
)
from sqlalchemy.sql import select
from sqlalchemy.engine.base import Connection
from sqlalchemy import and_, exc, func
from pyramid.request import Request
from pyramid.response import Response
from pyramid.view import view_defaults, view_config
import gkcore
from gkcore.views.api_reports import getBalanceSheet
from gkcore.views.api_invoice import getInvoiceList
from datetime import datetime, date
from gkcore.views.api_user import getUserRole
from gkcore.views.api_godown import getusergodowns
import requests
import json

# Spreadsheet libraries
import openpyxl
from openpyxl.styles import Font, Alignment
from openpyxl.styles.colors import RED


# from io import BytesIO
import io


def product_service_list(self):

    """
    This function returns a spreadsheet form of List of Products Report.
    The spreadsheet in XLSX format is generated by the backend and sent in base64 encoded format.
    It is decoded and returned along with mime information.

    params:

    fystart = financial year beginning in yyyymmdd format
    fyend = financial year ending in yyyymmdd format
    orgname = organisation name
    """
    try:
        header = {"gktoken": self.request.headers["gktoken"]}
        subreq = Request.blank("/products", headers=header)
        # result = requests.get("http://127.0.0.1:6543/products", headers=header)
        result = self.request.invoke_subrequest(subreq)
        subreq2 = Request.blank("/products?tax=vatorgst", headers=header)
        result2 = self.request.invoke_subrequest(subreq2)
        # resultgstvat = resultgstvat.json()["gkresult"]
        resultgstvat = json.loads(result2.text)["gkresult"]
        result = json.loads(result.text)["gkresult"]
        fystart = str(self.request.params["fystart"])
        fyend = str(self.request.params["fyend"])
        orgname = str(self.request.params["orgname"])
        # A workbook is opened.
        productwb = openpyxl.Workbook()
        # The new sheet is the active sheet as no other sheet exists. It is set as value of variable - sheet.
        sheet = productwb.active
        # Title of the sheet and width of columns are set.
        sheet.title = "List of Products"
        sheet.column_dimensions["A"].width = 8
        sheet.column_dimensions["B"].width = 24
        sheet.column_dimensions["C"].width = 18
        sheet.column_dimensions["D"].width = 24
        sheet.column_dimensions["E"].width = 16
        # Cells of first two rows are merged to display organisation details properly.
        sheet.merge_cells("A1:E2")
        # Font and Alignment of cells are set. Each cell can be identified using the cell index - column name and row number.
        sheet["A1"].font = Font(name="Liberation Serif", size="16", bold=True)
        sheet["A1"].alignment = Alignment(horizontal="center", vertical="center")
        # Organisation name and financial year are displayed.
        sheet["A1"] = orgname + " (FY: " + fystart + " to " + fyend + ")"
        sheet.merge_cells("A3:E3")
        sheet["A3"].font = Font(name="Liberation Serif", size="14", bold=True)
        sheet["A3"].alignment = Alignment(horizontal="center", vertical="center")
        sheet["A3"] = "List of Products"
        sheet.merge_cells("A3:E3")
        sheet["A4"] = "Sr.No."
        if resultgstvat == "22":
            sheet["B4"] = "Product"
            sheet["C4"] = "Category"
            sheet["D4"] = "UOM"
        else:
            sheet["B4"] = "Product/service"
            sheet["C4"] = "Type"
            sheet["D4"] = "Category"
            sheet["E4"] = "Uom"
        titlerow = sheet.row_dimensions[4]
        titlerow.font = Font(name="Liberation Serif", size=12, bold=True)
        srno = 1
        if resultgstvat == "22":
            row = 5
            for stock in result:
                sheet["A" + str(row)] = srno
                sheet["A" + str(row)].alignment = Alignment(horizontal="left")
                sheet["A" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                sheet["B" + str(row)] = stock["productdesc"]
                sheet["B" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                sheet["C" + str(row)] = stock["categoryname"]
                sheet["C" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                sheet["D" + str(row)] = stock["unitname"]
                sheet["D" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                row += 1
                srno += 1
        else:
            row = 5
            for stock in result:
                sheet["A" + str(row)] = srno
                sheet["A" + str(row)].alignment = Alignment(horizontal="left")
                sheet["A" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                sheet["B" + str(row)] = stock["productdesc"]
                sheet["B" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                if stock["gsflag"] == 7:
                    sheet["C" + str(row)] = "Product"
                    sheet["C" + str(row)].font = Font(
                        name="Liberation Serif", size="12", bold=False
                    )
                else:
                    sheet["C" + str(row)] = "Service"
                    sheet["C" + str(row)].font = Font(
                        name="Liberation Serif", size="12", bold=False
                    )
                sheet["D" + str(row)] = stock["categoryname"]
                sheet["D" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                sheet["E" + str(row)] = stock["unitname"]
                sheet["E" + str(row)].font = Font(
                    name="Liberation Serif", size="12", bold=False
                )
                row += 1
                srno += 1
        output = io.BytesIO()
        productwb.save(output)
        contents = output.getvalue()
        output.close()
        headerList = {
            "Content-Type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "Content-Length": len(contents),
            "Content-Disposition": "attachment; filename=report.xlsx",
            "X-Content-Type-Options": "nosniff",
            "Set-Cookie": "fileDownload=true; path=/ [;HttpOnly]",
        }
        # headerList = {'Content-Type':'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ,'Content-Length': len(contents),'Content-Disposition': 'attachment; filename=report.xlsx','Set-Cookie':'fileDownload=true; path=/'}
        return Response(contents, headerlist=list(headerList.items()))
    except:
        return {"gkstatus": 3}
