"""
This file is part of GNUKhata: A modular, robust and Free Accounting System.

License: AGPLv3

Contributors:
"Ankita Chakrabarti"<chakrabarti.ankita94@gmail.com>
"Sai Karthik"<kskarthik@disrot.org>
"Kannan"<@kannan:poddery.com>
"""
from gkcore import eng, enumdict
from gkcore.utils import authCheck
from gkcore.models.gkdb import organisation
from sqlalchemy.sql import select
from pyramid.view import view_defaults, view_config
from gkcore.views.reports.helpers.stock import (
    calculateOpeningStockValue,
    calculateClosingStockValue,
)
from gkcore.views.reports.helpers.balance import get_groupwise_accounts_balances


@view_defaults(request_method="GET")
class profit_loss(object):
    def __init__(self, request):
        self.request = request

    @view_config(route_name="profit-loss", renderer="json_extended")
    def get_trading_profit_loss_report(self):
        """This API handles generates Trading and Profit & Loss report for given period.

        This report will have four parts,
        1. Trading Left: This section will have Opening Stock, Direct Expenses and
           Gross Profit c/d to PNL (if any).
        2. Trading Right: This section will have Closing Stock, Direct Income and
           Gross Loss c/d to PNL (if any).
        3. PNL Left: This section will have Gross Loss b/d, Indirect Expense and Net
           Profit c/f.
        4. PNL Right: This section will have Gross Profit b/d, Indirect Income and Net
           Loss c/f.

        Opening Stock is generated using `calculateOpeningStockValue` function and
        and Closing Stock is generated using `calculateClosingStockValue`.

        Direct/Indirect Income/Expense reports are generated using
        `get_groupwise_accounts_balances`. These reports are generated by calculating
        balances of Direct/Indirect Income/Expense accounts respectively.

        Gross Profit/Loss is calculated by equation:
           Gross Profit/Loss
              = Direct Income - Direct Expense + Closing Stock - Opening Stock

        Net Profit/Loss is calculated by equation:
           Net Profit/Loss
              = Indirect Income - Indirect Expense + Gross Profit/Loss

        For each section, section wise totals are also calculated.
        """

        # Check whether the user is registered & valid
        try:
            token = self.request.headers["gktoken"]
        except:
            return {"gkstatus": enumdict["UnauthorisedAccess"]}
        auth_details = authCheck(token)
        if auth_details["auth"] == False:
            return {"gkstatus": enumdict["UnauthorisedAccess"]}
        with eng.connect() as con:
            orgcode = auth_details["orgcode"]
            org_details = con.execute(
                select([organisation])
                .where(organisation.c.orgcode == orgcode)
            ).fetchone()
            calculate_from = self.request.params["calculatefrom"]
            org_type = org_details["orgtype"]
            profit_str = "Profit" if org_type == "Profit Making" else "Surplus"
            loss_str = "Loss" if org_type == "Profit Making" else "Deficit"
            calculate_to = self.request.params["calculateto"]
            # Calculate opening stock value
            opening_stock = calculateOpeningStockValue(con, orgcode)
            # Calculate closing stock value
            closing_stock = calculateClosingStockValue(
                con, orgcode, calculate_to
            )

            # Calculate balance for Direct/Indirect Income/Expense accounts
            trading_left, direct_expense = get_groupwise_accounts_balances(
                con, orgcode, "Direct Expense", calculate_from, calculate_to
            )
            trading_right, direct_income = get_groupwise_accounts_balances(
                con, orgcode, "Direct Income", calculate_from, calculate_to
            )
            pnl_left, indirect_expense = get_groupwise_accounts_balances(
                con, orgcode, "Indirect Expense", calculate_from, calculate_to
            )
            pnl_right, indirect_income = get_groupwise_accounts_balances(
                con, orgcode, "Indirect Income", calculate_from, calculate_to
            )

            # Calculate gross and net profit/loss
            gross_pnl = (
                direct_income
                - direct_expense
                + closing_stock["total"]
                - opening_stock["total"]
            )
            net_pnl = (
                gross_pnl
                + indirect_income
                - indirect_expense
            )

            # Sorting the trading and pnl sections
            trading_left.insert(
                0, {
                    "name": "Opening Stock",
                    "amount": opening_stock["total"],
                    "type": "stock",
                    "level": "0",
                }
            )
            trading_right.append(
                {
                    "name": "Closing Stock",
                    "amount": closing_stock["total"],
                    "type": "stock",
                    "level": "0",
                }
            )
            totals = {
                "trading_left": opening_stock["total"] + direct_expense,
                "trading_right": closing_stock["total"] + direct_income,
                "pnl_left": indirect_expense,
                "pnl_right": indirect_income,
            }
            if gross_pnl < 0:
                trading_right.append(
                    {
                        "name": f"Gross {loss_str} c/d to {profit_str} & {loss_str}",
                        "amount": -gross_pnl,
                        "level": "0",
                        "type": "pnl_str",
                    }
                )
                totals["trading_right"] -= gross_pnl
                pnl_left.insert(
                    0, {
                        "name": f"Gross {loss_str} b/d to {profit_str} & {loss_str}",
                        "amount": gross_pnl,
                        "level": "0",
                        "type": "pnl_str",
                    }
                )
                totals["pnl_left"] -= gross_pnl
            else:
                trading_left.append(
                    {
                        "name": f"Gross {profit_str} c/d to {profit_str} & {loss_str}",
                        "amount": gross_pnl,
                        "level": "0",
                        "type": "pnl_str",
                    }
                )
                totals["trading_left"] += gross_pnl
                pnl_right.insert(
                    0, {
                        "name": f"Gross {profit_str} b/d to {profit_str} & {loss_str}",
                        "amount": gross_pnl,
                        "level": "0",
                        "type": "pnl_str",
                    }
                )
                totals["pnl_right"] += gross_pnl

            if net_pnl < 0:
                pnl_right.append(
                    {
                        "name": f"Net {loss_str} c/f",
                        "amount": -net_pnl,
                        "level": "0",
                        "type": "pnl_str",
                    }
                )
                totals["pnl_right"] -= net_pnl
            else:
                pnl_left.append(
                    {
                        "name": f"Net {profit_str} c/f",
                        "amount": net_pnl,
                        "level": "0",
                        "type": "pnl_str",
                    }
                )
                totals["pnl_left"] += net_pnl

            for table_name in ["trading_left", "trading_right", "pnl_left", "pnl_right"]:
                locals()[table_name].append(
                    {
                        "name": "Total",
                        "amount": totals[table_name],
                        "level": "0",
                        "type": "total",
                    }
                )

            response = {
                "org_type": org_type,
                "trading_left": trading_left,
                "trading_right": trading_right,
                "pnl_left": pnl_left,
                "pnl_right": pnl_right,
            }

        return {"gkstatus": enumdict["Success"], "gkresult": response}
