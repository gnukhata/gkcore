variables:
  # POSTGRES_USER: "gkadmin"
  # POSTGRES_PASSWORD: "gkadmin"
  # POSTGRES_DB: "gkdata"
  # GKCORE_DB_URL: "postgres://gkadmin:gkadmin@postgres:5432/gkdata"

services:
  # - postgres:alpine
  - docker:20.10.19-dind

stages:
  - build
  - deploy
  # tests are run against the dev server, so deploy stage should complete first
  - test

# runs the api tests against the dev server
api tests:
  image: kskarthik/nexial-core:latest
  stage: test
  # this job runs with a delay to make sure the dev server
  # is updated to latest commit
  when: delayed
  start_in: 3 minutes
  script: |
    cd tests/artifact
    nexial.sh -plan plan/GNUKhata-plan.xlsx

# build gkcore
# gkcore:
#   image: python:3.8-slim-buster
#   stage: build
#   script:
#     - apt update && apt install -y build-essential libpq-dev
#     - pip3 install -r requirements.txt
#     - python3 setup.py develop
#     - python3 initdb.py
#     - pserve production.ini
#     #run tests
#     - python3 gkcore/tests/public_apis.py

# build gkcore docker image from devel commits & upload it to docker hub
docker-devel:
  image: docker:20.10.19
  stage: build
  script:
    # build the docker image & push to the dockerhub
    - docker login -u digitalfreedom -p $DOCKERHUB_PWD
    - docker build -t digitalfreedom/gkcore:devel --build-arg VERSION=$CI_COMMIT_SHORT_SHA .
    - docker push digitalfreedom/gkcore:devel
  only:
    - devel

# build gkcore docker image on a release/tags & push it to the docker hub
docker-prod:
  image: docker:20.10.19
  stage: build
  script:
    # build the docker image & push to the dockerhub
    - docker login -u digitalfreedom -p $DOCKERHUB_PWD
    - docker build -t digitalfreedom/gkcore:$CI_COMMIT_TAG --build-arg VERSION=$CI_COMMIT_TAG .
    - docker push digitalfreedom/gkcore:$CI_COMMIT_TAG
    # create alias for the latest tag
    - docker tag digitalfreedom/gkcore:$CI_COMMIT_TAG digitalfreedom/gkcore:latest
    - docker push digitalfreedom/gkcore:latest
  only:
    - tags

# generate api docs
# pages:
#   stage: build
#   script:
#     # install required gkcore dependencies for gkcore to make pdoc to work
#     - apt update && apt install -y build-essential libpq-dev
#     # install the gkcore pip dependencies
#     - pip install -r requirements.txt
#     # install & generate api docs with pdoc
#     - pip install pdoc
#     - pdoc -o .pub/gkcore-api-docs/ gkcore/
#     # compress the docs & move to public dir. This compressed file
#     # will be pulled during gnukhata.org website build for
#     # displaying the api-docs
#     - tar -cf gkcore-api-docs.tar.gz .pub/gkcore-api-docs/
#     - mv gkcore-api-docs.tar.gz .pub/
#     # rename the dir to match gitlab ci's reserved "public" dir name
#     - mv .pub public
#     # gzip the public dir
#     - gzip -k -9 $(find public -type f)
#   artifacts:
#     paths:
#       - public

# deploy devel branch changes to gkcore test server
update_test_server:
  stage: deploy
  # needs: ["gkcore"]
  script:
    - apt update && apt install -y curl
    - curl $TEST_SERVER_HOOK
  only:
    - devel
